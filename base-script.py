import ipsimport mathpsm = ips.init()""" Очень базовый скрипт для стенда ИЭС.1. Включает все линии2. Наивно предсказывает генерацию по СЭC/ВЭС (по медиане)3. И ничего больше не делает."""station_names = {"main", "miniA", "miniB"}past_tick = max(psm.tick - 1, 0)next_tick = min(psm.tick + 1, len(psm.forecasts.houseA[0]) - 1)now_wind = psm.forecasts.wind[0][psm.tick]next_wind = psm.forecasts.wind[0][next_tick]past_sun = psm.forecasts.sun[0][past_tick]now_sun = psm.forecasts.sun[0][psm.tick]next_sun = psm.forecasts.sun[0][next_tick]consumption = 0  # прогноз суммарного потребленияgeneration = 0  # прогноз суммарной генерацииfor obj in psm.objects:    addr = obj.address[0]    if obj.type in station_names:        # включаем линии        for i in range(2 if obj.type == "miniB" else 3):            psm.orders.line_on(addr, i+1)        continue    if obj.type == "wind":        # вычисляем прогноз ветра по медиане        if now_wind <= next_wind:            generation += obj.power.now.generated * 1.10        else: # now_wind > next_wind            generation += obj.power.now.generated * 0.85        continue    if obj.type == "solar":        # вычисляем прогноз солнца по медиане        if now_sun <= next_sun:            generation += obj.power.now.generated * 1.05        else: # now_sun > next_sun            generation += obj.power.now.generated * 0.85        continue    # вычисляем прогноз потребления по медиане    if obj.type == "housea":        consumption += psm.forecasts.houseA[0][next_tick]    if obj.type == "houseb":        consumption += psm.forecasts.houseB[0][next_tick]    if obj.type == "factory":        consumption += psm.forecasts.factory[0][next_tick]    if obj.type == "hospital":        consumption += psm.forecasts.hospital[0][next_tick]shortage = consumption - generationprint("SHORT", shortage)for index, net in psm.networks.items():    print("== Энергорайон", index, "==")    print("Адрес:", net.location)          # (ID подстанции, № линии)]    print("Включен:", net.online) # bool    print("Генерация:", net.upflow) # float    print("Потребление:", net.downflow) # float    print("Потери:", net.losses) # float    print("Усталость ветки:", net.wear) # float    print("Оставшееся время восстановления",          "после аварии:", net.broken) # intpsm.orders.add_graph(0, psm.forecasts.houseA[0]) psm.orders.add_graph(0, psm.forecasts.houseB[0]) psm.orders.add_graph(0, psm.forecasts.factory[0]) psm.orders.add_graph(0, psm.forecasts.hospital[0]) psm.orders.add_graph(0, psm.forecasts.sun[0]) psm.orders.add_graph(0, psm.forecasts.wind[0]) psm.orders.add_graph(1, [i for i in range(psm.tick)])psm.orders.add_graph(2, [math.inf, math.nan])psm.orders.add_graph(10, [math.inf, math.nan])print(psm.orders.humanize())psm.save_and_exit()